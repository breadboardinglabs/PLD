Name            CGAClockV1 CGA Video Adaptor Clock;
Partno          CGAClockV1;
Revision        01;
Date            22/10/24;
Designer        Dave Henry;
Company         Breadboarding;
Location        UK;
Assembly        None;
Device          p22v10;

/**********************************************************************************/
/* Based on V3 of MDA Clock PLD with Hires to switch between 80 & 40 Column Modes */
/* This PLD buffers the 25MHz Dot clock and inverted, Divides dot clock           */
/* by 8 for Character Clock (Qc), Qb used for VA0 for char/att toggle             */
/* Also latch clocks for Character, Attribute and Shift Reg. Latches              */
/* DotClk will be 25.175 Mhz when HIRES=1, 12.59Mhz when HIRES=0                  */
/* This Version 1 only inlcudes full support for 80 Column Mode. Once this is     */
/* working we will add the timing for 40 Column Mode                              */
/**********************************************************************************/

/* Pin Map 
         --------
  25Mhz |1     24| Vcc
  HIRES |2     23| ATSRLatch
  NC    |3     22| Qd 
  NC    |4     21| -CH/AT
  NC    |5     20| CHLatch
  /RST  |6     19| Qa
  NC    |7     18| Qb
  NC    |8     17| Qc
  NC    |9     16| /Qc /ChClk for CRTC
  NC    |10    15| -CH/ATDly
  NC    |11    14| DotClk 
  Gnd   |12    13| NC 
         --------
*/

/*
 * Inputs:  
 */

Pin 1  =  25Mhz;
Pin 2  =  HIRES;
Pin 6  =  !RST;
/*
 * Outputs:  define outputs - all are simple combinatorial
 */
Pin 23 = ATSRLatch;   /* Attribute and Shift Register Latch */
Pin 22 = Qd;          /* /16 Extra divider for HIRES=0 40 Column Mode */
Pin 21 = CHAT;        /* Video address 0 switch between character and attribute RAM */
Pin 20 = CHLatch;     /* Character Latch */
Pin 19 = Qa;          /* Counter output /2 */
Pin 18 = Qb;          /* Counter outut /4 Video Address 0 */
Pin 17 = Qc;          /* Counter output /8 Character Clock */
Pin 16 = QcInv;       /* Inverted Counter output /8 */
Pin 15 = CHATDly;     /* CHAT delayed 1 Dot Clock cycle */
Pin 14 = DotClk;      /* Dot Clock Buffered 25Mhz when HIRES=1 Qa when HIRES=0 */

/*
 * Logic symbols
 * ! NOT  # OR   & AND  $ XOR   .d D Flip-flop Input
 */

CLK=25Mhz;

/* DotClk = (25Mhz & HIRES) # (Qa & !HIRES);This prevents graphics modes from working */
DotClk = 25Mhz;

/* These conditions are required to cascade D Flip-Flops */
/* as a Counter !Q feeds back into D */
/* Q3.d = !clr & ((!Q3 & Q2 & Q1 & Q0) # (Q3 & !(Q2 & Q1 & Q0))); */
Qd.d = ((!Qd & Qc & Qb & Qa) # (Qd & !(Qc & Qb & Qa))) ;
Qc.d = ((!Qc & Qb & Qa) # (Qc & !(Qb & Qa))) ;
Qb.d = (!Qb & Qa # Qb & !Qa);
/* D Flip Flop Counter feeds !Q into D and uses CLK to cycle */
Qa.d = !Qa;

Qa.ar = RST;
Qb.ar = RST;
Qc.ar = RST;
Qd.ar = RST;
QcInv= !Qc;

/* Character Latch now original SR Latch #3- 4 FF so don't need Colour pipeline */
/* CHLatch=!(!Qa & Qb & !Qc); old 3 cycles */
CHLatch=Qc # Qa # Qb;

/* V2 This is the condition we worked out in the Excel Sheet now at #5 - 6 FF */
/* ATSRLatch=Qc # (!(Qa & Qb)); */

/* V3 Move back to clock cycle 4 from 3 in V2 */
ATSRLatch=!Qc # Qa # Qb;

/* VA0 is based on inverted Qc delayed by 2 dot clocks */
CHATDly.d = !Qc;
CHAT.d = CHATDly;